{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/David/Desktop/projekat_pia/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Pravougaonik } from '../model/rectaingle';\nlet ClientComponent = class ClientComponent {\n  constructor(userService, router, elementRef) {\n    this.userService = userService;\n    this.router = router;\n    this.elementRef = elementRef;\n    this.kvadrati = [];\n    this.selectedRect = null;\n    this.current_shape_index = null;\n    this.is_dragging = false;\n    this.drawingDoors = false; // da li crtamo vrata\n\n    this.doors = [];\n    this.selectedDoor = null;\n    this.current_door_index = null;\n    this.allObjects = []; // Agencije : pretrazivanje i prikazivanje\n\n    this.allAgencies = []; // POSLOVI\n\n    this.sviPoslovi = [];\n  }\n\n  ngOnInit() {\n    this.username = sessionStorage.getItem('username');\n    this.password = sessionStorage.getItem('password');\n    this.findImage();\n    this.canvas = document.querySelector('#canvas1');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = 300;\n    this.canvas.height = 300;\n    this.canvas2 = this.elementRef.nativeElement.querySelector('#canvas2');\n    this.ctx2 = this.canvas2.getContext('2d');\n    this.canvas2.width = 300;\n    this.canvas2.height = 300;\n    this.canvas.addEventListener(\"click\", event => {\n      let x = event.offsetX;\n      let y = event.offsetY;\n\n      if (this.drawingDoors) {\n        // crtamo vrata\n        const novaVrata = new Pravougaonik(x, y, 20, 20);\n        const preklapaSe = this.doors.some(door => door.intersects(novaVrata));\n\n        if (!preklapaSe) {\n          if (novaVrata.x + novaVrata.width < this.canvas.width && novaVrata.y + novaVrata.height < this.canvas.height) {\n            this.doors.push(novaVrata);\n            draw_shapes.bind(this)();\n          }\n        }\n      } else {\n        // crtamo sobu\n        const noviKvadrat = new Pravougaonik(x, y, this.rectWidth, this.rectHeight);\n        const preklapaSe = this.kvadrati.some(kvadrat => kvadrat.intersects(noviKvadrat)); //ako se bar sa jednim preklapa, vratice true\n\n        if (!preklapaSe) {\n          if (noviKvadrat.x + noviKvadrat.width < this.canvas.width && noviKvadrat.y + noviKvadrat.height < this.canvas.height) {\n            this.kvadrati.push(noviKvadrat);\n            draw_shapes.bind(this)();\n          }\n        }\n      }\n    });\n\n    let is_mouse_in_shape = (x, y, kvadrat) => {\n      let shape_left = kvadrat.x;\n      let shape_right = kvadrat.x + kvadrat.width;\n      let shape_top = kvadrat.y;\n      let shape_bottom = kvadrat.y + kvadrat.height;\n\n      if (x > shape_left && x < shape_right && y > shape_top && y < shape_bottom) {\n        return true;\n      }\n\n      return false;\n    };\n\n    let mouse_down = event => {\n      event.preventDefault(); //this.startX = parseInt(event.offsetX);\n      //this.startY = parseInt(event.offsetY);\n\n      let index = 0;\n\n      if (!this.drawingDoors) {\n        // pomeramo sobu\n        this.startX = parseInt(event.offsetX);\n        this.startY = parseInt(event.offsetY);\n\n        for (let kvadrat of this.kvadrati) {\n          if (is_mouse_in_shape(this.startX, this.startY, kvadrat)) {\n            this.current_shape_index = index;\n            this.is_dragging = true;\n            return;\n          }\n\n          index++;\n        }\n      } else {\n        // pomeramo vrata\n        this.startDoorX = parseInt(event.offsetX);\n        this.startDoorY = parseInt(event.offsetY);\n\n        for (let vrata of this.doors) {\n          if (is_mouse_in_shape(this.startDoorX, this.startDoorY, vrata)) {\n            this.current_door_index = index;\n            this.is_dragging = true;\n            return;\n          }\n\n          index++;\n        }\n      }\n    };\n\n    let mouse_up = event => {\n      if (!this.is_dragging) {\n        return;\n      }\n\n      event.preventDefault();\n      this.is_dragging = false;\n    };\n\n    let mouse_out = event => {\n      if (!this.is_dragging) {\n        return;\n      }\n\n      event.preventDefault();\n      this.is_dragging = false;\n    };\n\n    let mouse_move = event => {\n      if (!this.is_dragging) {\n        return;\n      } else {\n        event.preventDefault();\n        let mouseX = parseInt(event.offsetX);\n        let mouseY = parseInt(event.offsetY);\n        let dx;\n        let dy;\n        let current_shape = this.kvadrati[this.current_shape_index];\n        let current_door = this.doors[this.current_door_index];\n\n        if (!this.drawingDoors) {\n          dx = mouseX - this.startX;\n          dy = mouseY - this.startY; // Provera preklapanja sa drugim kvadratima\n\n          let preklapaSe = this.kvadrati.some((kvadrat, index) => {\n            if (index !== this.current_shape_index) {\n              return kvadrat.intersects(new Pravougaonik(current_shape.x + dx, current_shape.y + dy, current_shape.width, current_shape.height));\n            }\n\n            return false;\n          });\n\n          if (!preklapaSe) {\n            if (current_shape.x + dx + current_shape.width < this.canvas.width && current_shape.x + dx > 0) {\n              current_shape.x += dx;\n            }\n\n            if (current_shape.y + dy + current_shape.height < this.canvas.height && current_shape.y + dy > 0) {\n              current_shape.y += dy;\n            }\n          }\n\n          draw_shapes();\n          this.startX = mouseX;\n          this.startY = mouseY;\n        } else {\n          dx = mouseX - this.startDoorX;\n          dy = mouseY - this.startDoorY;\n\n          if (current_door.x + dx + current_door.width < this.canvas.width && current_door.x + dx > 0) {\n            current_door.x += dx;\n          }\n\n          if (current_door.y + dy + current_door.height < this.canvas.height && current_door.y + dy > 0) {\n            current_door.y += dy;\n          }\n\n          draw_shapes();\n          this.startDoorX = mouseX;\n          this.startDoorY = mouseY;\n        }\n      }\n    };\n\n    this.canvas.onmousedown = mouse_down;\n    this.canvas.onmouseup = mouse_up;\n    this.canvas.onmouseout = mouse_out;\n    this.canvas.onmousemove = mouse_move;\n\n    let draw_shapes = function () {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      for (let kvadrat of this.kvadrati) {\n        this.ctx.beginPath();\n        this.ctx.rect(kvadrat.x, kvadrat.y, kvadrat.width, kvadrat.height);\n        this.ctx.stroke();\n      }\n\n      for (let door of this.doors) {\n        this.ctx.fillStyle = 'brown';\n        this.ctx.fillRect(door.x, door.y, door.width, door.height);\n      }\n    }.bind(this);\n\n    draw_shapes();\n    this.userService.getAllObjects(this.username).subscribe(data => {\n      this.allObjects = data;\n    });\n    this.userService.getAllAgencies().subscribe(data => {\n      this.allAgencies = data;\n    });\n    this.userService.getAllUserJobs(this.username).subscribe(data => {\n      this.sviPoslovi = data;\n    });\n  }\n\n  findImage() {\n    this.userService.findClient(this.username, this.password).subscribe(client => {\n      if (client) {\n        this.image = client.image;\n        this.firstname = client.firstname;\n        this.lastname = client.lastname;\n        this.contact = client.contact;\n        this.mail = client.mail;\n      } else {\n        console.log(\"neuspeh\");\n      }\n    });\n  } // Dodavanje objekta\n\n\n  addObject() {\n    const kanvas = {\n      brSoba: this.kvadrati.length,\n      brVrata: this.doors.length,\n      koordinateSoba: this.kvadrati.map(kvadrat => ({\n        x: kvadrat.x,\n        y: kvadrat.y,\n        width: kvadrat.width,\n        height: kvadrat.height,\n        color: null\n      })),\n      koordinateVrata: this.doors.map(door => ({\n        x: door.x,\n        y: door.y,\n        width: door.width,\n        height: door.height\n      }))\n    };\n    this.userService.addObject(this.username, this.tipObj, this.adresaObj, this.prostorijeObj, this.kvadratura, kanvas).subscribe(resp => {\n      if (resp) {\n        alert(resp['message']);\n      } else {\n        alert(\"Objekat nije dodat.\");\n      }\n    });\n    this.ngOnInit();\n  } // dodavanje objekta preko JSON fajla\n\n\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const contents = e.target.result;\n      const json = JSON.parse(contents); //console.log(json);\n      // Dodajemo JSON u bazu\n\n      this.userService.addObject(this.username, json.tip, json.adresa, json.prostorije, json.kvadratura, json.canvas).subscribe(resp => {\n        if (resp) {\n          alert(resp['message']);\n        } else {\n          alert(\"Objekat nije dodat.\");\n        }\n      });\n    };\n\n    reader.readAsText(file);\n    this.ngOnInit();\n  } // za prikazivanje na canvasu 2\n\n\n  showCanvas(canvas) {\n    this.ctx2.clearRect(0, 0, this.canvas2.width, this.canvas2.height);\n\n    for (let i = 0; i < canvas.brSoba; i++) {\n      if (canvas.koordinateSoba[i].color == \"red\") {\n        this.ctx2.fillStyle = 'red';\n        this.ctx2.fillRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n        this.ctx2.strokeRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n      } else if (canvas.koordinateSoba[i].color == \"green\") {\n        this.ctx2.fillStyle = 'green';\n        this.ctx2.fillRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n        this.ctx2.strokeRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n      } else {\n        this.ctx2.beginPath();\n        this.ctx2.rect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n        this.ctx2.stroke();\n      }\n    }\n\n    for (let i = 0; i < canvas.brVrata; i++) {\n      this.ctx2.fillStyle = 'brown';\n      this.ctx2.fillRect(canvas.koordinateVrata[i].x, canvas.koordinateVrata[i].y, canvas.koordinateVrata[i].width, canvas.koordinateVrata[i].height);\n    }\n  }\n\n  editCanvas(adresa) {\n    sessionStorage.setItem(\"userObj\", this.username);\n    sessionStorage.setItem(\"adresaObj\", adresa);\n    this.router.navigate(['edit-obj']);\n  }\n\n  deleteCanvas(tip, adresa) {\n    this.userService.deleteObject(tip, adresa).subscribe(resp => {\n      if (resp) {} else {\n        alert(\"Objekat nije obrisan.\");\n      }\n    });\n    this.ngOnInit();\n  } // Promena lozinke\n\n\n  changePassword() {\n    if (this.isDisabled() == true) {\n      this.message = \"Morate uneti sva polja.\";\n      return;\n    }\n\n    if (this.isPasswordValid() == false) return;\n\n    if (this.oldPassword != this.password) {\n      this.message = \"Stara lozinka nije ispravna.\";\n      return;\n    }\n\n    if (this.newPassword != this.repeatPassword) {\n      this.message = \"Ponovljena lozinka mora biti ista kao nova.\";\n      return;\n    }\n\n    this.userService.changePassword(this.username, this.newPassword).subscribe(resp => {\n      if (resp) {\n        alert(resp['message']);\n      } else {\n        this.message = \"Promena lozinke neuspesna.\";\n      }\n    });\n  }\n\n  isDisabled() {\n    if (this.oldPassword && this.newPassword && this.repeatPassword) return false;else return true;\n  }\n\n  isPasswordValid() {\n    if (this.newPassword.length < 7 || this.newPassword.length > 12) {\n      this.message = \"Lozinka mora da sadrzi najmanje 7, a najvise 12 karaktera.\";\n      return false;\n    }\n\n    const firstCaracter = this.newPassword.charAt(0);\n\n    if (!/[a-zA-Z]/.test(firstCaracter)) {\n      this.message = \"Prvi karakter lozinke mora biti slovo.\";\n      return false;\n    }\n\n    if (!/[A-Z]/.test(this.newPassword) || !/[0-9]/.test(this.newPassword) || !/[^a-zA-Z0-9]/.test(this.newPassword)) {\n      this.message = \"Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter.\";\n      return false;\n    }\n\n    return true; //proslo je sve uslove\n  }\n\n  searchAgency() {\n    if (this.searchName && !this.searchAddress) {\n      this.userService.searchAgenciesName(this.searchName).subscribe(data => {\n        this.allAgencies = data;\n      });\n    } else if (!this.searchName && this.searchAddress) {\n      this.userService.searchAgenciesAddress(this.searchAddress).subscribe(data => {\n        this.allAgencies = data;\n      });\n    } else if (this.searchName && this.searchAddress) {\n      this.userService.searchAgencies(this.searchName, this.searchAddress).subscribe(data => {\n        this.allAgencies = data;\n      });\n    } else {\n      this.ngOnInit();\n    }\n  }\n\n  sortirajAgencije() {\n    this.allAgencies.sort((ag1, ag2) => {\n      const valueA = this.getPropertyValue(ag1, this.sortParam);\n      const valueB = this.getPropertyValue(ag2, this.sortParam);\n\n      if (valueA < valueB) {\n        return -1 * this.sortTrend; // Promenjeno u negativan broj za opadajući redosled\n      } else if (valueA > valueB) {\n        return 1 * this.sortTrend;\n      } else {\n        return 0;\n      }\n    });\n  }\n\n  getPropertyValue(obj, prop) {\n    return obj[prop.toLowerCase()];\n  }\n\n  podnesiZahtev() {\n    this.userService.addZahtev(this.username, this.agencijaZahtev, this.adresaZahtev, this.rokZahtev, \"neobradjenZahtev\").subscribe(resp => {\n      if (resp) {\n        alert(resp['message']);\n      } else {\n        alert(\"Zahtev nije dodat.\");\n      }\n    });\n    this.ngOnInit();\n  }\n\n  prihvatiPonudu(agencija, adresa) {\n    this.userService.prihvatiPonudu(this.username, agencija, adresa).subscribe(resp => {\n      if (resp) {} else {\n        this.message = \"Neuspeh!\";\n      }\n    });\n    this.ngOnInit();\n  }\n\n  odbijPonudu(agencija, adresa) {\n    this.userService.odbijPonudu(this.username, agencija, adresa).subscribe(resp => {\n      if (resp) {} else {\n        this.message = \"Neuspeh!\";\n      }\n    });\n    this.ngOnInit();\n  }\n\n  plati(agencija, adresa) {\n    console.log(\"plati\");\n    this.userService.plati(this.username, agencija, adresa).subscribe(resp => {\n      if (resp) {} else {\n        this.message = \"Neuspeh!\";\n      }\n    });\n    this.ngOnInit();\n  }\n\n  isJobFinished(adresa) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const resp = yield _this.userService.isJobFinished(_this.username, adresa).toPromise();\n\n        if (resp) {\n          console.log(resp['message']);\n          return resp['message'];\n        } else {\n          return \"Neuspeh\";\n        }\n      } catch (error) {\n        console.log(error);\n        return \"Neuspeh\";\n      }\n    })();\n  }\n\n  filtrirajPoslove() {\n    if (this.filterPosao == \"aktivan\" || this.filterPosao == \"zavrsen\" || this.filterPosao == \"zahtev\") {\n      this.userService.filterJobs(this.username, this.filterPosao).subscribe(data => {\n        this.sviPoslovi = data;\n        console.log(this.sviPoslovi);\n      });\n    } else if (this.filterPosao == \"svi\") {\n      this.userService.getAllUserJobs(this.username).subscribe(data => {\n        this.sviPoslovi = data;\n      });\n    } else {\n      alert(\"GRESKA filter\");\n    }\n  }\n\n};\nClientComponent = __decorate([Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})], ClientComponent);\nexport { ClientComponent };","map":{"version":3,"mappings":"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","names":["Component","Pravougaonik","ClientComponent","constructor","userService","router","elementRef","ngOnInit","username","sessionStorage","getItem","password","findImage","canvas","document","querySelector","ctx","getContext","width","height","canvas2","nativeElement","ctx2","addEventListener","event","x","offsetX","y","offsetY","drawingDoors","novaVrata","preklapaSe","doors","some","door","intersects","push","draw_shapes","bind","noviKvadrat","rectWidth","rectHeight","kvadrati","kvadrat","is_mouse_in_shape","shape_left","shape_right","shape_top","shape_bottom","mouse_down","preventDefault","index","startX","parseInt","startY","current_shape_index","is_dragging","startDoorX","startDoorY","vrata","current_door_index","mouse_up","mouse_out","mouse_move","mouseX","mouseY","dx","dy","current_shape","current_door","onmousedown","onmouseup","onmouseout","onmousemove","clearRect","beginPath","rect","stroke","fillStyle","fillRect","getAllObjects","subscribe","data","allObjects","getAllAgencies","allAgencies","getAllUserJobs","sviPoslovi","findClient","client","image","firstname","lastname","contact","mail","console","log","addObject","kanvas","brSoba","length","brVrata","koordinateSoba","map","color","koordinateVrata","tipObj","adresaObj","prostorijeObj","kvadratura","resp","alert","onFileSelected","file","target","files","reader","FileReader","onload","e","contents","result","json","JSON","parse","tip","adresa","prostorije","readAsText","showCanvas","i","strokeRect","editCanvas","setItem","navigate","deleteCanvas","deleteObject","changePassword","isDisabled","message","isPasswordValid","oldPassword","newPassword","repeatPassword","firstCaracter","charAt","test","searchAgency","searchName","searchAddress","searchAgenciesName","searchAgenciesAddress","searchAgencies","sortirajAgencije","sort","ag1","ag2","valueA","getPropertyValue","sortParam","valueB","sortTrend","obj","prop","toLowerCase","podnesiZahtev","addZahtev","agencijaZahtev","adresaZahtev","rokZahtev","prihvatiPonudu","agencija","odbijPonudu","plati","isJobFinished","toPromise","error","filtrirajPoslove","filterPosao","filterJobs","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\David\\Desktop\\projekat_pia\\frontend\\src\\app\\client\\client.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { Router } from '@angular/router';\nimport { Client } from '../model/client';\nimport { Pravougaonik } from '../model/rectaingle';\nimport { Objekat } from '../model/object';\nimport { Agency } from '../model/agency';\nimport { Zahtev } from '../model/zahtev';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})\nexport class ClientComponent implements OnInit {\n\n  constructor(private userService: UserService, private router: Router, private elementRef: ElementRef) { }\n\n  ngOnInit(): void {\n    this.username = sessionStorage.getItem('username');\n    this.password = sessionStorage.getItem('password');\n    this.findImage();\n\n    this.canvas = document.querySelector('#canvas1');\n    this.ctx = this.canvas.getContext('2d');\n    this.canvas.width = 300;\n    this.canvas.height = 300;\n\n    this.canvas2 = this.elementRef.nativeElement.querySelector('#canvas2');\n    this.ctx2 = this.canvas2.getContext('2d');\n    this.canvas2.width = 300;\n    this.canvas2.height = 300;\n    \n    this.canvas.addEventListener(\"click\", (event) => {\n      let x = event.offsetX;\n      let y = event.offsetY;\n\n      if(this.drawingDoors){    // crtamo vrata\n        const novaVrata = new Pravougaonik(x, y, 20, 20);\n        const preklapaSe = this.doors.some((door) => door.intersects(novaVrata));\n        \n        if(!preklapaSe){\n          if(novaVrata.x + novaVrata.width < this.canvas.width && novaVrata.y + novaVrata.height < this.canvas.height) {\n            this.doors.push(novaVrata);\n            draw_shapes.bind(this)();\n          }\n        }\n      }\n      else {    // crtamo sobu\n        const noviKvadrat = new Pravougaonik(x, y, this.rectWidth, this.rectHeight);\n        \n        const preklapaSe = this.kvadrati.some((kvadrat) => kvadrat.intersects(noviKvadrat));  //ako se bar sa jednim preklapa, vratice true\n\n        if (!preklapaSe) {\n          if(noviKvadrat.x + noviKvadrat.width < this.canvas.width && noviKvadrat.y + noviKvadrat.height < this.canvas.height) {\n            this.kvadrati.push(noviKvadrat);\n            draw_shapes.bind(this)();\n          }        \n        }\n      }\n      \n        \n    })\n\n    \n    let is_mouse_in_shape = (x, y, kvadrat) => {\n      let shape_left = kvadrat.x;\n      let shape_right = kvadrat.x + kvadrat.width;\n      let shape_top = kvadrat.y;\n      let shape_bottom = kvadrat.y + kvadrat.height;\n\n      if(x > shape_left && x < shape_right && y > shape_top && y < shape_bottom) {\n        return true;\n      }\n\n      return false;\n    }\n\n    let mouse_down = (event) => {\n      event.preventDefault();\n      \n      //this.startX = parseInt(event.offsetX);\n      //this.startY = parseInt(event.offsetY);\n\n      let index=0;\n      \n      if(!this.drawingDoors) {    // pomeramo sobu\n        this.startX = parseInt(event.offsetX);\n        this.startY = parseInt(event.offsetY);\n\n        for(let kvadrat of this.kvadrati) {\n          if(is_mouse_in_shape(this.startX, this.startY, kvadrat)){\n            this.current_shape_index = index;\n            this.is_dragging = true;\n            return;\n          }\n          index++;\n        }\n      }\n      else {  // pomeramo vrata\n        this.startDoorX = parseInt(event.offsetX);\n        this.startDoorY = parseInt(event.offsetY);\n\n        for(let vrata of this.doors) {\n          if(is_mouse_in_shape(this.startDoorX, this.startDoorY, vrata)){\n            this.current_door_index = index;\n            this.is_dragging = true;\n            return;\n          }\n          index++;\n        }\n      }\n    }\n\n    let mouse_up = (event) => {\n      if(!this.is_dragging){\n        return;\n      }\n\n      event.preventDefault();\n      this.is_dragging = false;\n    }\n\n    let mouse_out = (event) => {\n      if(!this.is_dragging){\n        return;\n      }\n\n      event.preventDefault();\n      this.is_dragging = false;\n    }\n\n    let mouse_move = (event) => {\n      if(!this.is_dragging){\n        return;\n      } else {\n        event.preventDefault();\n        let mouseX = parseInt(event.offsetX);\n        let mouseY = parseInt(event.offsetY);\n        \n        let dx;\n        let dy;\n\n        let current_shape = this.kvadrati[this.current_shape_index];\n        let current_door = this.doors[this.current_door_index];\n\n        \n        if(!this.drawingDoors){\n          dx = mouseX - this.startX;\n          dy = mouseY - this.startY;\n\n          // Provera preklapanja sa drugim kvadratima\n          let preklapaSe = this.kvadrati.some((kvadrat, index) => {\n            if (index !== this.current_shape_index) {\n              return kvadrat.intersects(new Pravougaonik(\n                current_shape.x + dx,\n                current_shape.y + dy,\n                current_shape.width,\n                current_shape.height\n              ));\n            }\n            return false;\n          });\n\n          if(!preklapaSe){\n            if(current_shape.x + dx + current_shape.width < this.canvas.width && current_shape.x + dx > 0){\n              current_shape.x += dx;\n            }          \n            if(current_shape.y + dy + current_shape.height < this.canvas.height && current_shape.y + dy > 0){\n              current_shape.y += dy;\n            }\n          }        \n  \n          draw_shapes();\n  \n          this.startX = mouseX;\n          this.startY = mouseY;\n        }       \n        else {\n          dx = mouseX - this.startDoorX;\n          dy = mouseY - this.startDoorY;\n          \n          if(current_door.x + dx + current_door.width < this.canvas.width && current_door.x + dx > 0){\n            current_door.x += dx;\n          }          \n          if(current_door.y + dy + current_door.height < this.canvas.height && current_door.y + dy > 0){\n            current_door.y += dy;\n          }    \n  \n          draw_shapes();\n  \n          this.startDoorX = mouseX;\n          this.startDoorY = mouseY;\n        }\n        \n      }\n    }\n\n    this.canvas.onmousedown = mouse_down;\n    this.canvas.onmouseup = mouse_up;\n    this.canvas.onmouseout = mouse_out;\n    this.canvas.onmousemove = mouse_move;\n\n    let draw_shapes = function() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      for(let kvadrat of this.kvadrati){        \n        this.ctx.beginPath();\n        this.ctx.rect(kvadrat.x, kvadrat.y, kvadrat.width, kvadrat.height);\n        this.ctx.stroke();\n      }\n      for(let door of this.doors){\n        this.ctx.fillStyle = 'brown';\n        this.ctx.fillRect(door.x, door.y, door.width, door.height);\n      }\n    }.bind(this);\n    draw_shapes();\n\n    this.userService.getAllObjects(this.username).subscribe((data: Objekat[])=>{\n      this.allObjects = data;\n    })\n    this.userService.getAllAgencies().subscribe((data: Agency[])=>{\n      this.allAgencies = data;\n    })\n    this.userService.getAllUserJobs(this.username).subscribe((data: Zahtev[])=>{\n      this.sviPoslovi = data;\n    })\n  }\n\n  username: string;\n  password: string;\n  image: string;\n  message: string;\n  firstname: string;\n  lastname: string;\n  contact: string;\n  mail: string;\n\n  // canvas\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  kvadrati: Pravougaonik[] = [];\n  selectedRect: Pravougaonik = null;\n  offsetX: number;\n  offsetY: number;\n  current_shape_index: number = null;\n  is_dragging: boolean = false;\n  startX: number;\n  startY: number;\n\n  canvas2: HTMLCanvasElement;\n  ctx2: CanvasRenderingContext2D;\n\n  rectHeight: number;\n  rectWidth: number;\n  drawingDoors: boolean = false;   // da li crtamo vrata\n  doors: Pravougaonik[] = [];\n  selectedDoor: Pravougaonik = null;\n  current_door_index: number = null;\n  startDoorX: number;\n  startDoorY: number;\n\n  // Unose se sa forme za promenu lozinke:\n  oldPassword: string;\n  newPassword: string;\n  repeatPassword: string;\n\n  // Objekat\n  tipObj: string;\n  adresaObj: string;\n  prostorijeObj: number;\n  kvadratura: number;\n  allObjects: Objekat[] = [];\n  \n\n  findImage() {\n    this.userService.findClient(this.username, this.password).subscribe((client: Client)=>{\n      if(client){\n        this.image = client.image;\n        this.firstname = client.firstname;\n        this.lastname = client.lastname;\n        this.contact = client.contact;\n        this.mail = client.mail;\n      }\n      else {\n        console.log(\"neuspeh\");\n      }\n    });\n  }\n\n  // Dodavanje objekta\n  addObject() {\n\n    const kanvas = {\n      brSoba: this.kvadrati.length,\n      brVrata: this.doors.length,\n      koordinateSoba: this.kvadrati.map(kvadrat => ({\n        x: kvadrat.x,\n        y: kvadrat.y,\n        width: kvadrat.width,\n        height: kvadrat.height,\n        color: null\n      })),\n      koordinateVrata: this.doors.map(door => ({\n        x: door.x,\n        y: door.y,\n        width: door.width,\n        height: door.height\n      }))\n    };\n\n    this.userService.addObject(this.username, this.tipObj, this.adresaObj, this.prostorijeObj, this.kvadratura, kanvas).subscribe(resp => {\n      if (resp) {\n        alert(resp['message']);\n      } else {\n        alert(\"Objekat nije dodat.\");\n      }\n    });\n\n    this.ngOnInit();\n  }\n\n  // dodavanje objekta preko JSON fajla\n  onFileSelected(event: any) {\n    const file: File = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (e: any) => {\n      const contents = e.target.result;\n      const json = JSON.parse(contents);\n      //console.log(json);\n\n      // Dodajemo JSON u bazu\n      this.userService.addObject(this.username, json.tip, json.adresa, json.prostorije, json.kvadratura, json.canvas).subscribe(resp=>{    //subscribe - cekam odgovor u userFromDB\n        if(resp){\n          alert(resp['message']);\n        }\n        else {\n          alert(\"Objekat nije dodat.\");\n        }\n      })\n      \n    };\n\n    reader.readAsText(file);\n    this.ngOnInit();\n  }\n\n  // za prikazivanje na canvasu 2\n  showCanvas(canvas: any) {\n    this.ctx2.clearRect(0, 0, this.canvas2.width, this.canvas2.height);\n\n    for(let i=0; i < canvas.brSoba; i++){\n      if(canvas.koordinateSoba[i].color == \"red\"){\n        this.ctx2.fillStyle = 'red';\n        this.ctx2.fillRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n        this.ctx2.strokeRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n      } else if(canvas.koordinateSoba[i].color == \"green\") {\n        this.ctx2.fillStyle = 'green';\n        this.ctx2.fillRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n        this.ctx2.strokeRect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n      } \n      else {\n        this.ctx2.beginPath();\n        this.ctx2.rect(canvas.koordinateSoba[i].x, canvas.koordinateSoba[i].y, canvas.koordinateSoba[i].width, canvas.koordinateSoba[i].height);\n        this.ctx2.stroke();\n      }\n    }\n    for(let i=0; i < canvas.brVrata; i++){\n      this.ctx2.fillStyle = 'brown';\n      this.ctx2.fillRect(canvas.koordinateVrata[i].x, canvas.koordinateVrata[i].y, canvas.koordinateVrata[i].width, canvas.koordinateVrata[i].height);\n    }\n  }\n\n  editCanvas(adresa: string) {\n    sessionStorage.setItem(\"userObj\", this.username);\n    sessionStorage.setItem(\"adresaObj\", adresa);\n\n    this.router.navigate(['edit-obj']);\n  }\n\n  deleteCanvas(tip: string, adresa: string) {\n    this.userService.deleteObject(tip, adresa).subscribe(resp=>{    //subscribe - cekam odgovor u userFromDB\n      if(resp){\n      }\n      else {\n        alert(\"Objekat nije obrisan.\");\n      }\n    }) \n\n    this.ngOnInit();\n  }\n\n  // Promena lozinke\n  changePassword() {\n    if(this.isDisabled() == true) {\n      this.message = \"Morate uneti sva polja.\"\n      return;\n    }\n    if(this.isPasswordValid() == false) return;    \n\n    if(this.oldPassword != this.password) {\n      this.message = \"Stara lozinka nije ispravna.\";\n      return;\n    }\n\n    if(this.newPassword != this.repeatPassword) {\n      this.message = \"Ponovljena lozinka mora biti ista kao nova.\";\n      return;\n    }\n\n    this.userService.changePassword(this.username, this.newPassword).subscribe(resp=>{    //subscribe - cekam odgovor u userFromDB\n      if(resp){\n        alert(resp['message']);\n      }\n      else {\n        this.message = \"Promena lozinke neuspesna.\"\n      }\n    })\n\n  }\n\n  isDisabled(): boolean {     // ako nisu uneta sva polja -> disabled\n    if(this.oldPassword && this.newPassword && this.repeatPassword) return false;\n      else return true;\n  }\n\n  isPasswordValid(): boolean {   //pomocna funkcija koja proverava ispravnost lozinke\n    if(this.newPassword.length<7 || this.newPassword.length>12) {\n      this.message = \"Lozinka mora da sadrzi najmanje 7, a najvise 12 karaktera.\"\n      return false;\n    }\n\n    const firstCaracter = this.newPassword.charAt(0);\n    if(!/[a-zA-Z]/.test(firstCaracter)) {\n      this.message = \"Prvi karakter lozinke mora biti slovo.\"\n      return false;\n    }\n\n    if(!/[A-Z]/.test(this.newPassword) || !/[0-9]/.test(this.newPassword) || !/[^a-zA-Z0-9]/.test(this.newPassword)) {\n      this.message = \"Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter.\"\n      return false;\n    }\n\n    return true;  //proslo je sve uslove\n  }\n\n  // Agencije : pretrazivanje i prikazivanje\n  allAgencies: Agency[] = [];\n  searchName: String;\n  searchAddress: String;\n  \n  sortParam: string;       // po cemu sortiramo: naziv / opis\n  sortTrend: number;   // kriterijum: asc / desc\n\n  adresaZahtev: string;\n  rokZahtev: string;\n  agencijaZahtev: string;\n\n  searchAgency() {\n    if(this.searchName && !this.searchAddress) {\n      this.userService.searchAgenciesName(this.searchName).subscribe((data: Agency[])=>{\n        this.allAgencies = data;\n      })\n    }\n    else if(!this.searchName && this.searchAddress) {\n      this.userService.searchAgenciesAddress(this.searchAddress).subscribe((data: Agency[])=>{\n        this.allAgencies = data;\n      })\n    } \n    else if(this.searchName && this.searchAddress) {\n      this.userService.searchAgencies(this.searchName, this.searchAddress).subscribe((data: Agency[])=>{\n        this.allAgencies = data;\n      })\n    } \n    else {\n      this.ngOnInit();\n    }\n    \n  }\n\n  sortirajAgencije() {\n    this.allAgencies.sort((ag1, ag2) => {\n      const valueA = this.getPropertyValue(ag1, this.sortParam);\n      const valueB = this.getPropertyValue(ag2, this.sortParam);\n    \n      if (valueA < valueB) {\n        return -1 * this.sortTrend; // Promenjeno u negativan broj za opadajući redosled\n      } else if (valueA > valueB) {\n        return 1 * this.sortTrend;\n      } else {\n        return 0;\n      }\n    });\n  }\n  getPropertyValue(obj: Agency, prop: string): any {\n    return obj[prop.toLowerCase()];\n  }\n\n\n  // POSLOVI\n  sviPoslovi: Zahtev[] = [];\n  filterPosao: string;\n\n\n  podnesiZahtev() {\n    this.userService.addZahtev(this.username, this.agencijaZahtev, this.adresaZahtev, this.rokZahtev, \"neobradjenZahtev\").subscribe(resp => {\n      if (resp) {\n        alert(resp['message']);\n      } else {\n        alert(\"Zahtev nije dodat.\");\n      }\n    });\n\n    this.ngOnInit();\n  }\n\n  prihvatiPonudu(agencija: string, adresa: string) {\n    this.userService.prihvatiPonudu(this.username, agencija, adresa).subscribe(resp=>{\n      if(resp){\n      }\n      else {\n        this.message = \"Neuspeh!\"\n      }\n    })\n\n    this.ngOnInit();\n  }\n\n  odbijPonudu(agencija: string, adresa: string) {\n    this.userService.odbijPonudu(this.username, agencija, adresa).subscribe(resp=>{\n      if(resp){\n      }\n      else {\n        this.message = \"Neuspeh!\"\n      }\n    })\n\n    this.ngOnInit();\n  }\n\n  plati(agencija: string, adresa: string) {\n    console.log(\"plati\");\n    this.userService.plati(this.username, agencija, adresa).subscribe(resp=>{\n      if(resp){\n      }\n      else {\n        this.message = \"Neuspeh!\"\n      }\n    })\n\n    this.ngOnInit();\n  }\n\n  async isJobFinished(adresa: string): Promise<string> {\n    try {\n      const resp = await this.userService.isJobFinished(this.username, adresa).toPromise();\n      if (resp) {\n        console.log(resp['message']);\n        return resp['message'];\n      } else {\n        return \"Neuspeh\";\n      }\n    } catch (error) {\n      console.log(error);\n      return \"Neuspeh\";\n    }\n  }\n\n  filtrirajPoslove() {\n    if(this.filterPosao == \"aktivan\" || this.filterPosao == \"zavrsen\" || this.filterPosao == \"zahtev\"){\n      this.userService.filterJobs(this.username, this.filterPosao).subscribe((data: Zahtev[])=>{\n        this.sviPoslovi = data;\n        console.log(this.sviPoslovi);\n      })\n    }\n    else if(this.filterPosao == \"svi\"){\n      this.userService.getAllUserJobs(this.username).subscribe((data: Zahtev[])=>{\n        this.sviPoslovi = data;\n      })\n    } \n    else {\n      alert(\"GRESKA filter\");\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}